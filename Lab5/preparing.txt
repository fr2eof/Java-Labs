Как работает StringBuilder под капотом
есть класс родитель abstaract stringBuilder
1)Внутреннее представление: StringBuilder использует массив символов (char[])
 для хранения строки. Этот массив динамически расширяется при необходимости,
 что позволяет эффективно обрабатывать большие объемы данных.
2)Динамическое расширение: Когда StringBuilder достигает предела
 своего текущего массива символов, он автоматически создает новый 
массив большего размера и копирует в него данные из старого массива. 
Этот процесс называется "расширением" и обеспечивает, что StringBuilder 
может эффективно обрабатывать строки любой длины.
3)Операции над строками: StringBuilder предоставляет методы 
для выполнения различных операций над строками, 
таких как append(), insert(), delete(), reverse() и другие.
 Эти методы изменяют содержимое внутреннего массива символов,
 не создавая новых объектов строки.
4)Преобразование в строку: Когда необходимо получить итоговую строку, 
StringBuilder может преобразовать свое внутреннее представление в объект 
String с помощью метода toString(). Этот метод создает новый объект String,
 содержащий текущее состояние StringBuilder.


Класс Collectors в Java является частью пакета java.util.stream, 
который предоставляет API для работы со стримами данных. 
Стримы были введены в Java 8 и предназначены для обработки коллекций 
данных в функциональном стиле. Класс Collectors предоставляет набор 
статических методов, которые используются для преобразования стримов в 
коллекции, а также для выполнения различных операций агрегации и сбора данных.

Как работает .stream() под капотом
Метод .stream() преобразует коллекцию в стрим. 
Стрим — это последовательность элементов, которые могут быть 
обработаны параллельно или последовательно. Когда вы вызываете 
.stream() на коллекции, например, на списке или множестве, 
Java создает объект стрима, который содержит ссылку на исходную коллекцию 
и метаданные о том, как обрабатывать элементы стрима.

Создание стрима: Когда вы вызываете .stream() на коллекции, Java создает
 объект стрима, который содержит ссылку на исходную коллекцию и метаданные 
о том, как обрабатывать элементы стрима. Этот объект стрима не содержит 
самих данных, а только информацию о том, как получить доступ к ним.

Ленивые операции: Операции над стримами, такие как фильтрация, преобразование 
и агрегация, являются "ленивыми". Это означает, что они не выполняются 
сразу же, а откладываются до тех пор, пока стрим не будет реально 
использован. Это позволяет оптимизировать производительность, выполняя
 операции только тогда, когда это действительно необходимо.

Параллельные стримы: Стримы могут быть как последовательными, 
так и параллельными. Последовательные стримы обрабатывают элементы 
последовательно, в то время как параллельные стримы могут обрабатывать 
элементы параллельно, используя многопоточность. Это может значительно 
ускорить обработку больших объемов данных.