cloneable к abstract не рабоатет так как метод клон к экземпляру 
а мы не можем содать экземпляр у абстракта.
\
перегрузка методов
По порядку параметров(1 или 2)
По типам параметров(int , double)/reverse
По количеству параметров(int , double)/reverse
\
коваринаты
Основная идея, лежащая в основе ковариантных типов 
возвращаемых данных, 
заключается в поддержке подстановки Лискова .
\
SOLID
Single responsibility — принцип единственной ответственности
(одна инкапсулированная обязаность (одна задача которую должна выполнить программа 
вход и вывод ошибки))
Open-closed — принцип открытости / закрытости
(открыты для расширения , но закрыты для изменения (геттеры сеттеры))
Liskov substitution — принцип подстановки Барбары Лисков
(подклассы могли бы служить заменой для своих суперклассов
и программа не ломается)
Interface segregation — принцип разделения интерфейса
(создание узконаправленных интрейфесов, от которых не ьудет зависеть пользователь)
Dependency inversion — принцип инверсии зависимостей
(модули верхних уровней не должны зависеть от модулей нижних уровней
(пример работы с файлами и облаком))
\
wildcard обьекты
Collection<? extends Animal> - любой наследник Animal или же он сам
Collection<? super Cat> - любой суперкласс Cat'a
например используются для ввода данных от разных классов
(не знаем какого класса придут данные)
\
лямбда- метод без объявления и модификаторов доступа, 
возвращающие значение и имя.(аннонимный метод, который создают и сразу же используют)
\
базовые функ интефейсы
Consumer(принимает и что-то делает ничего не выводит), 
Supplier(ничего не принимает, но возращает обьект), 
Predicat(проверка условий)<T t> x -> x%2==0
Function(от T к R)
UnaryOperator(T что-то делает возвращает T)
\
ссылки на методы
Для использования необходимо написать оператор ::
используются для передавания данных вместо аргумента
(замена лямбдам)
(можно ссылки на конструкторы)
\
элементы функ программирования
функции являются объектами, и их можно присваивать переменным, передавать
в качестве аргументов другим функциям, возвращать в качестве результата