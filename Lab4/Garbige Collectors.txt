Serial GC - самый первый (полезен для программ с маленькой кучей) 
делит на регионы эдэн выжившие и старшие

Parallel CG - параллельно участвуют несколько потоков,
и сборщик может подстраиваться под требуемые параметры производительности.
Сборщик использует статистику предыдущих сборок
мусора для настройки параметров производительности в будущих сборках. \

(наследует подходы к сборке от последовательного сборщика)
Но есть два принципиальных отличия в работе с этими регионами: 
во-первых, сборкой мусора занимаются несколько потоков параллельно; 
во-вторых, данный сборщик может самостоятельно подстраиваться 
под требуемые параметры производительности. 


Concurrent Mark Sweep (CMS) - Он предназначен для приложений, 
где требуется доступ к нескольким ядрам процессора 
и которые чувствительны к паузам Stop-The-World.
CMS выполняет этапы сборки мусора параллельно с основной программой,
что позволяет ей работать без остановки
(Важным отличием сборщика CMS от рассмотренных ранее является также то, 
что он не дожидается заполнения Tenured для того, чтобы начать старшую сборку. 
Вместо этого он трудится в фоновом режиме постоянно, пытаясь поддерживать Tenured 
в компактном состоянии.)


Garbage-First (G1) 
Здесь память разбивается на множество регионов одинакового размера.
 (зависит об размера кучи)
подход тот же по переносу из поколений но с несколькими потоками,
но отличие состоит в том, что очистка выполняется не на всем поколении, 
а только на части регионов, которые сборщик сможет очистить не превышая 
желаемого времени. При этом он выбирает для очистки те регионы, 
в которых, по его мнению, скопилось наибольшее количество мусора 
и очистка которых принесет наибольший результат

Epsilon GC разработан для ситуаций, когда сборка мусора не требуется.